{"version":3,"sources":["component/Auth/ResetPassword/index.js","component/common/NormalButton/NormalButton.js","component/common/InputBox/InputBox.js","component/common/PasswordInput/PasswordInputBox.js","pages/Auth/ResetPassword.js","component/common/ErrorMessage/index.js"],"names":["ResetPassword","useForm","register","handleSubmit","errors","reset","useState","mailId","setmainId","password","repassword","location","useLocation","useEffect","state","email","userEmail","className","strings","elmo","onSubmit","inputs","console","log","request","url","endponts","Endpoints","resetPassword","method","APIMethods","POST","data","then","ress","Toast","type","message","history","replace","value","placeholder","name","required","error","messages","loginButton","label","NormalButton","this","props","onClick","id","disabled","authButton","dasboardButton","outlineButton","outlineEditButton","rightIcon","Component","InputBox","onChange","maxlength","icons","GB","onWheel","ref","defaultValue","event","currentTarget","blur","PasswordInputBox","passwordType","setType","passwordText","setPasswordText","ResetPasswordPage","FormErrorMessage"],"mappings":"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","file":"static/js/58.69fbacc1.chunk.js","sourcesContent":["import { history } from \"helpers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"component/Auth/ResetPassword/styles.scss\";\nimport InputBox from \"component/common/InputBox/InputBox\";\nimport { useForm } from \"react-hook-form\";\nimport FormErrorMessage from \"component/common/ErrorMessage\";\nimport NormalButton from \"component/common/NormalButton/NormalButton\";\nimport Checkbox from '@mui/material/Checkbox';\nimport { strings } from \"service/helpers/Constants\";\nimport { BsCheck } from \"react-icons/bs\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\nimport { request } from \"service\";\nimport endponts from \"service/endponts\";\nimport { Toast } from \"service/toast\";\nimport PasswordInputBox from \"component/common/PasswordInput/PasswordInputBox\";\n\n\nconst ResetPassword = () => {\n    const { register, handleSubmit, errors, reset } = useForm();\n    const [mailId, setmainId] = useState(\"\");\n    const [password, setpassword] = useState(\"\");\n    const [repassword, setrePassword] = useState(\"\");\n\n\n    const location = useLocation()\n\n\n    useEffect(() => {\n        if (location.state && location.state.email) {\n            let userEmail = location.state.email ? location.state.email : \"\";\n            setmainId(userEmail)\n        }\n    }, [location]);\n\n    const onSubmit = (inputs) => {\n        // try {\n        //     history.push(\"/admin/dashboard\");\n        // } catch (err) { }\n\n        console.log(inputs);\n        if(inputs.password != inputs.repassword){\n            Toast({type:'error',message:\"Password does not match\"});\n            return\n        }\n        request({\n            url:endponts.Endpoints.resetPassword,\n            method:endponts.APIMethods.POST,\n            data:{\n                \"email\":mailId,\n                \"password\":inputs.password\n            }\n        }).then(ress=>{\n            console.log(ress);\n            Toast({type:'success',message:ress.data.message})\n            history.replace(\"/auth/login\");\n        })\n    };\n\n\n\n\n\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n    return (\n        <div>\n            <div className=\"container-fluid\">\n                <div className=\"row no-gutter\">\n                    <div className=\"d-none d-md-flex col-md-4 col-lg-7 bg-image\"></div>\n                    <div className=\"col-md-8 col-lg-5 bg_color\">\n                        <div className=\"login d-flex align-items-center py-3\">\n                            <div className=\"container\">\n                                <div className=\"row py-5 text-center\">\n                                    <div className=\"col-md-9 col-lg-8 mx-auto\"></div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-md-9 col-lg-8 mx-auto\">\n                                        <h3 className=\"login-heading\">\n                                            <span className=\"title_elmo\">{strings.elmo}</span>\n                                            <span className=\"title_admin\">Admin</span>\n                                        </h3>\n                                        <label className=\"font-bold-20 reset_label\">Forgot Password</label>\n                                        <p className=\"mb-4 text-muted discription\">\n                                            Your new password must be different from <br />\n                                            the previous used passwords\n                                        </p>\n                                        <div className=\"blank mt-3 mb-3\" />\n                                        <form onSubmit={handleSubmit(onSubmit)}>\n                                            <div className=\"mt-4\">\n                                                <label className=\"font-bold-16\">Password </label>\n                                                {/* <div className=\"input_field\"> */}\n                                                <PasswordInputBox\n                                                    errors={errors}\n                                                    value={password}\n                                                    placeholder=\" Password\"\n                                                    type=\"password\"\n                                                    name=\"password\"\n                                                    register={register({\n                                                        required: true,\n                                                    })}\n                                                />\n                                                {/* <div><label className=\"show\" >Show</label></div>\n                        </div> */}\n                                                <FormErrorMessage\n                                                    error={errors.password}\n                                                    messages={{\n                                                        required: \"Password is required\",\n                                                    }}\n                                                />\n                                            </div>\n                                            <div className=\"mt-4\">\n                                                <label className=\"font-bold-16\">Confirm Password </label>\n                                                {/* <div className=\"input_field\"> */}\n                                                <PasswordInputBox\n                                                    errors={errors}\n                                                    value={repassword}\n                                                    placeholder=\" Re-enter Password\"\n                                                    type=\"password\"\n                                                    name=\"repassword\"\n                                                    register={register({\n                                                        required: true,\n                                                    })}\n                                                />\n                                                {/* <div><label className=\"show\" >Show</label></div>\n                        </div> */}\n                                                <FormErrorMessage\n                                                    error={errors.password}\n                                                    messages={{\n                                                        required: \"Password is required\",\n                                                    }}\n                                                />\n                                            </div>\n\n                                            <div className=\"mt-5\">\n                                                    <NormalButton loginButton label=\"Reset Password\" />\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ResetPassword;\n","import React, { Component } from \"react\";\n// import styles from \"./button.module.scss\";\nimport \"./normalButton.scss\";\nexport class NormalButton extends Component {\n  render() {\n    const {\n      className = \"\",\n      label = \"\",\n      onClick,\n      id,\n      type = \"submit\",\n      disabled = false,\n      authButton = false,\n      loginButton = false,\n      dasboardButton = false,\n      outlineButton = false,\n      outlineEditButton = false,\n\n      rightIcon = \"\",\n    } = this.props;\n\n    return (\n      <div>\n        <button\n          id={id}\n          type={type}\n          className={`cursor-pointer \n                     ${authButton ? \"authButton\" : \"\"}\n                     ${loginButton ? \"loginButton\" : \"\"}\n                     ${dasboardButton ? \"dasboardButton\" : \"\"}\n                     ${outlineButton ? \"outlineButton\" : \"\"}\n                     ${outlineEditButton ? \"outlineEditButton\" : \"\"}\n\n                     ${className}`}\n          onClick={onClick}\n          disabled={disabled}\n        >\n          {label}\n          {rightIcon !== \"\" ? (\n            <span className={`btn-right-icon ${rightIcon}`}></span>\n          ) : null}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default NormalButton;\n","import React from \"react\";\nimport \"./InputBox.scss\";\n\nconst InputBox = (props) => {\n  let {\n    placeholder = \"\",\n    register = {},\n    value = \"\",\n    type = \"text\",\n    onChange,\n    name = \"\",\n    maxlength = \"\",\n    icons = false,\n    GB = false,\n    onWheel = \"\",\n  } = props;\n  return (\n    <>\n      <input\n        name={name}\n        placeholder={placeholder}\n        className={\"inputBoxStyle\"}\n        ref={register}\n        defaultValue={value}\n        type={type}\n        maxlength={maxlength}\n        onWheel={(event) => event.currentTarget.blur()}\n        // onChange={(e) => {\n        //     let body = {};\n\n        //     body = {\n        //         target: {\n        //             name: e.target.name,\n        //             value: e.target.value,\n        //         },\n        //     };\n\n        //     onChange(body);\n        // }}\n      />\n    </>\n  );\n};\nexport default InputBox;\n","import React, { useState } from \"react\";\nimport \"./PasswordInputBox.scss\";\n\nconst PasswordInputBox = (props) => {\n  let {\n    placeholder = \"\",\n    register = {},\n    value = \"\",\n    type = \"password\",\n    onChange,\n    name = \"\",\n    maxlength = \"\",\n    icons = false,\n    GB = false,\n    onWheel = \"\",\n  } = props;\n\n\n  const [passwordType,setType] = useState(\"password\")\n  const [passwordText,setPasswordText] = useState(\"Show\")\n\n  const onClickShow = () =>{\n    if(passwordType == \"password\"){\n      setType(\"text\");\n      setPasswordText(\"Hide\")\n    }else{\n      setType(\"password\");\n      setPasswordText(\"Show\")\n    }\n  }\n  return (\n    <div className=\"inputBoxContainer\">\n      <input\n        name={name}\n        placeholder={placeholder}\n        ref={register}\n        defaultValue={value}\n        className={\"inputBoxStyless\"}\n        type={passwordType}\n        maxlength={maxlength}\n        onWheel={(event) => event.currentTarget.blur()}\n        // onChange={(e) => {\n        //     let body = {};\n\n        //     body = {\n        //         target: {\n        //             name: e.target.name,\n        //             value: e.target.value,\n        //         },\n        //     };\n\n        //     onChange(body);\n        // }}\n      />\n      <p onClick={onClickShow} className=\"mt-3 mr-2\">{passwordText}</p>\n    </div>\n  );\n};\nexport default PasswordInputBox;\n","import ResetPassword from \"component/Auth/ResetPassword\";\nimport React from \"react\";\n\nconst ResetPasswordPage = () => {\n    return (\n        <div>\n            <ResetPassword />\n        </div>\n    );\n};\n\nexport default ResetPasswordPage;\n","import React from \"react\";\n\nconst FormErrorMessage = ({ error, type, messages }) => {\n  if (!error) return null;\n\n  return (\n    <span className=\"text-danger fs-13\">\n      {messages[error.type] ? messages[error.type] : \"Error in field\"}\n    </span>\n  );\n};\nexport default FormErrorMessage;\n"],"sourceRoot":""}
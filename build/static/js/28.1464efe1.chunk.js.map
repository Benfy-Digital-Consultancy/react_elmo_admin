{"version":3,"sources":["component/Auth/VerificationCode/index.js","component/common/NormalButton/NormalButton.js","component/common/FormInput/index.js"],"names":["Verification","useState","otp","setOtp","timer","setTimer","resendEnable","setResendEnable","timerCount","setTimerCount","location","useLocation","email","setEmail","encodedeEmail","setEncodedEmail","useEffect","state","userEmail","encrypt","split","reverse","join","atValues","substring","executeTimer","seconds","Math","floor","minutes","minuteText","toString","length","secondText","setTimeout","a","count","className","strings","elmo","value","onChange","e","numInputs","hasErrored","isInputNum","inputStyle","width","height","borderColor","borderWidth","separator","onClick","currentDate","moment","utcOffset","format","request","url","endponts","Endpoints","forgotPassword","method","APIMethods","POST","data","requestedDateTime","then","Toast","type","message","inputs","verifyOTP","OTP","history","push","pathname","loginButton","label","NormalButton","this","props","id","disabled","authButton","dasboardButton","outlineButton","outlineEditButton","rightIcon","Component","FormInput","placeholder","register","name","maxlength","error","icons","GB","messages","onWheel","style","ref","defaultValue","event","currentTarget","blur"],"mappings":"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","file":"static/js/28.1464efe1.chunk.js","sourcesContent":["import { history } from \"helpers\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"component/Auth/VerificationCode/style.scss\";\nimport NormalButton from \"component/common/NormalButton/NormalButton\";\nimport { strings } from \"service/helpers/Constants\";\nimport FormInput from \"component/common/FormInput\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport OtpInput from 'react-otp-input';\nimport { request } from \"service\";\nimport endponts from \"service/endponts\";\nimport moment from \"moment\";\nimport { Toast } from \"service/toast\";\nimport { message } from \"antd\";\n\nconst Verification = () => {\n\n    const [otp, setOtp] = useState(\"\");\n\n    const [timer, setTimer] = useState(\"\");\n    const [resendEnable, setResendEnable] = useState(false);\n    const [timerCount, setTimerCount] = useState(60000);\n    const location = useLocation();\n\n    const [email, setEmail] = useState(\"\")\n    const [encodedeEmail, setEncodedEmail] = useState(\"\")\n\n    useEffect(() => {\n        if (location.state && location.state.email) {\n            let userEmail = location.state.email ? location.state.email : \"\";\n            setEncodedEmail(userEmail)\n            let em = userEmail.split(\"\").reverse().join(\"\");\n            let encrypt = em.split(\"@\");\n            let emailValue = (encrypt[1] + \"\").substring(0, 3)\n            let atValues = \"....\" + emailValue.split(\"\").reverse().join(\"\") + \"@\" + encrypt[0].split(\"\").reverse().join(\"\");\n            setEmail(atValues);\n        }\n    }, [location]);\n\n\n\n    const onClickResend = () => {\n        if (resendEnable) {\n            let currentDate = moment().utcOffset('+05:30').format(\"MM-DD-YYYY HH:mm:ss\")\n            request({\n                url: endponts.Endpoints.forgotPassword,\n                method: endponts.APIMethods.POST,\n                data: {\n                    email: encodedeEmail,\n                    requestedDateTime: currentDate\n                }\n            }).then(() => {\n\n                Toast({ type: \"success\", message: 'Otp resend successfully.' });\n                setTimerCount(60000);\n                setResendEnable(false)\n            })\n        }\n    }\n\n\n    useEffect(() => {\n        executeTimer()\n    }, [timerCount, resendEnable])\n\n\n\n    const executeTimer = () => {\n        let seconds = Math.floor((timerCount / 1000) % 60);\n\n        let minutes = Math.floor((timerCount / (1000 * 60)) % 60);\n\n        let minuteText = minutes.toString().length == 1 ? '0' + minutes : minutes\n        let secondText = seconds.toString().length == 1 ? '0' + seconds : seconds;\n        if (timerCount == 60000) {\n            setTimer(minuteText + ':' + secondText);\n        }\n        setTimeout(async () => {\n            if (seconds > -1) {\n                setTimer(minuteText + ':' + secondText);\n                let count = timerCount - 1000;\n                await setTimerCount(count);\n            } else {\n                setResendEnable(true)\n            }\n        }, 1000);\n    };\n\n    const onSubmit = (inputs) => {\n        let currentDate = moment().utcOffset('+05:30').format(\"MM-DD-YYYY HH:mm:ss\")\n        request({\n            url: endponts.Endpoints.verifyOTP,\n            method: endponts.APIMethods.POST,\n            data: {\n                email: encodedeEmail,\n                requestedDateTime: currentDate,\n                OTP: otp\n            }\n        }).then(() => {\n            history.push({\n                pathname: \"/auth/reset-password\",\n                state: { email: encodedeEmail }\n            });\n        })\n    };\n\n\n   \n\n    return (\n        <div>\n            <div className=\"container-fluid\">\n                <div className=\"row no-gutter\">\n                    <div className=\"d-none d-md-flex col-md-4 col-lg-7 bg-image\"></div>\n                    <div className=\"col-md-8 col-lg-5 bg_color\">\n                        <div className=\"login d-flex align-items-center py-3\">\n                            <div className=\"container\">\n                                <div className=\"row py-5 text-center\">\n                                    <div className=\"col-md-9 col-lg-8 mx-auto\"></div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-md-9 col-lg-8 mx-auto\">\n                                        <h3 className=\"login-heading\">\n                                            <span className=\"title_elmo\">{strings.elmo}</span>\n                                            <span className=\"title_admin\">Admin</span>\n                                        </h3>\n                                        <label className=\"font-bold-20 forgot_lable\">Forgot Password</label>\n                                        <p className=\"mb-4 text-muted discription\">\n                                            An verification code has been sent to<br />\n                                            {email}\n                                        </p>\n                                        <div className=\"blank mt-3 mb-3\" />\n                                        <div className=\"mt-4 counter\">\n                                            <div className=\"text-center\"><label className=\"mb-3 font-regular-14\">{timer}</label></div>\n                                            <div className=\"text-center\"><label className=\"font-regular-14\">Enter Verification Code</label></div>\n                                        </div>\n\n                                        <div className=\"otp_align mt-3\">\n\n                                            <OtpInput\n                                                value={otp}\n                                                onChange={(e) => setOtp(e)}\n                                                numInputs={4}\n                                                hasErrored\n                                                isInputNum\n                                                inputStyle={{\n                                                    width: '50px',\n                                                    height: '50px',\n                                                    borderColor: '#8692A6',\n                                                    borderWidth: '1px'\n                                                }}\n                                                separator={<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>}\n                                            />\n                                            {/* <div className=\"row \">\n                                                    <div className=\"col\">\n                                                        <FormInput \n                                                            maxlength={\"1\"}/>\n                                                    </div>\n                                                    <div className=\"col\">\n                                                        <FormInput />\n                                                    </div>\n                                                    <div className=\"col\">\n                                                        <FormInput />\n                                                    </div>\n                                                    <div className=\"col\">\n                                                        <FormInput />\n                                                    </div>\n                                                </div> */}\n                                        </div>\n\n\n                                        <div className=\"mt-4 \">\n                                            <div className=\"text-center resend\" onClick={onClickResend}>\n                                                <label className={\"mb-3 font-bold-14 in-active-resend\" + (resendEnable == true ? ' resend-button' : ' ')}>Re-send Verification Code</label>\n                                            </div>\n                                        </div>\n                                        <div className=\"mt-3\">\n                                            <NormalButton onClick={onSubmit} loginButton label=\"Verify\" />\n                                        </div>\n\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Verification;\n","import React, { Component } from \"react\";\n// import styles from \"./button.module.scss\";\nimport \"./normalButton.scss\";\nexport class NormalButton extends Component {\n  render() {\n    const {\n      className = \"\",\n      label = \"\",\n      onClick,\n      id,\n      type = \"submit\",\n      disabled = false,\n      authButton = false,\n      loginButton = false,\n      dasboardButton = false,\n      outlineButton = false,\n      outlineEditButton = false,\n\n      rightIcon = \"\",\n    } = this.props;\n\n    return (\n      <div>\n        <button\n          id={id}\n          type={type}\n          className={`cursor-pointer \n                     ${authButton ? \"authButton\" : \"\"}\n                     ${loginButton ? \"loginButton\" : \"\"}\n                     ${dasboardButton ? \"dasboardButton\" : \"\"}\n                     ${outlineButton ? \"outlineButton\" : \"\"}\n                     ${outlineEditButton ? \"outlineEditButton\" : \"\"}\n\n                     ${className}`}\n          onClick={onClick}\n          disabled={disabled}\n        >\n          {label}\n          {rightIcon !== \"\" ? (\n            <span className={`btn-right-icon ${rightIcon}`}></span>\n          ) : null}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default NormalButton;\n","import React from \"react\";\nimport \"./formInput.scss\";\n\nconst FormInput = ({\n  placeholder = \"\",\n  register = {},\n  value = \"\",\n  type = \"text\",\n  onChange,\n  name = \"\",\n  maxlength = \"\",\n  error = \"\",\n  icons = false,\n  GB = false,\n  disabled = false,\n  onWheel = \"\",\n  messages,\n  style={}\n}) => {\n  return (\n    <>\n      <input\n        name={name}\n        placeholder={placeholder}\n        className={\"formInputBox font-regular-14 \"+ (disabled ? 'formDiabled':'')}\n        ref={register}\n        disabled={disabled}\n        style={style}\n        defaultValue={value}\n        type={type}\n        maxlength={maxlength}\n        onWheel={(event) => event.currentTarget.blur()}\n      />\n      <span className=\"text-danger fs-13\">\n        {error?.type && messages[error.type]}\n      </span>\n    </>\n  );\n};\nexport default FormInput;\n"],"sourceRoot":""}